__author__ = 'GCassani'

"""Function to create a log file with an unambiguous name pointing to the specification of the model being run"""

import os
from corpus.encode.utilities import encoding_features


def make_log_file(training_corpus, test_file, output_folder, method, evaluation, f, k, time, reduced=False,
                  uni_phones=False, di_phones=True, tri_phones=False, syllable=False, stress_marker=True,
                  outcomes='tokens'):

    """
    :param training_corpus: the path to the file used as input corpus for the experiment
    :param test_file:       the path to the file containing strings used as test items
    :param output_folder:   the path to the folder where the logfile will be created
    :param method:          a string indicating the way in which the function looks at top active outcomes; two
                            options are available:
                            - 'freq' makes the function compute the distribution of PoS tags over the k top active
                              nodes (see the explanation of the parameter k) and rank PoS tags according to their
                              frequency among the top active cues
                            - 'sum' makes the function compute the sum of activation from all outcomes belonging to
                              a given PoS tag within the k top active outcomes given the input cues, and rank PoS
                              tags according to their total activation among the top active cues
    :param evaluation:      a string indicating how to compare baseline activations to item-triggered ones; two
                            options are available:
                            - 'count', simply tag the test item with the PoS tag that either was more frequent or
                              had highest summed activation within the top active outcomes; frequency or
                              activation are returned and can be correlated to reaction times
                            - 'distr', compare the frequency counts or summed activations generated by a specific
                              test item to the frequency counts or summed activations at baseline and tag the test
                              item with the PoS tag receiving highest support by the change in the distribution of
                              frequencies or summed activations (a statistic is returned, Chi-squared for
                              frequency distributions and t-test for summed activations, whose value can be
                              correlated to reaction times)
    :param f:               specify whether (and how many) top active outcome at baseline to flush away from
                            subsequent computations. It may be the case that whatever the input cues, the same high
                            frequency outcomes come out as being the most active. It may then make sense to not
                            consider them when evaluating the distribution of lexical categories over the most
                            active outcomes given an input item
    :param k:               an integer specifying how many elements to consider from the baseline activations and
                            the activations triggered by a specific test item. By default, the top 100 outcomes are
                            considered, and compared according to the chosen combination of method and eval
    :param time:            the percentage of the input corpus used to compute cue-outcome activation values
    :param reduced:         a boolean specifying whether reduced phonological forms should be extracted from Celex
                            whenever possible (if set to True) or if standard phonological forms should be preserved
                            (if False)
    :param uni_phones:      a boolean indicating whether single phonemes are to be considered while encoding input
                            utterances
    :param di_phones:       a boolean indicating whether sequences of two phonemes are to be considered while
                            encoding input utterances
    :param tri_phones:      a boolean indicating whether sequences of three phonemes are to be considered while
                            encoding input utterances
    :param syllable:        a boolean indicating whether syllables are to be considered while encoding input
                            utterances
    :param stress_marker:   a boolean indicating whether stress markers from the phonological representations of
                            Celex need to be preserved or can be discarded
    :param outcomes:        a string indicating which outcomes to use, whether 'tokens' (default) or 'lemmas'
    :return log_file:       the path of the file where the log of the experiment will be written
    """

    encoding = encoding_features(training_corpus, reduced=reduced, verbose=False, outcomes=outcomes,
                                 uni_phones=uni_phones, di_phones=di_phones, tri_phones=tri_phones, syllable=syllable,
                                 stress_marker=stress_marker)

    # create the log file in the same folder where the corpus is located, using encoding information in the file name,
    # including corpus, phonetic features, method, evaluation, f and k values
    filename = os.path.splitext(os.path.basename(training_corpus))[0]
    test_file = os.path.splitext(test_file)[0]
    log_file = os.path.join(output_folder, ".".join(['logfile', filename, test_file, encoding, method, evaluation,
                                                     ''.join(['t', str(time)]), ''.join(['k', str(k)]),
                                                     ''.join(['f', str(f)]), 'json']))

    return log_file
