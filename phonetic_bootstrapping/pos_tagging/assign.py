__author__ = 'GCassani'

"""Function to assign a PoS tag to a test item"""

import numpy as np
from scipy.stats import chi2_contingency
from phonetic_bootstrapping.pos_tagging.helpers import dict2numpy, std_res, differences
from phonetic_bootstrapping.pos_tagging.tags import get_top_pos_from_dict


def pick_pos(pos_freq_item, pos_act_item, freq_baseline, act_baseline, evaluation='distr', method='freq', stats=True):

    """
    :param pos_freq_item:       a dictionary mapping each PoS tag to its frequency count across the most active
                                outcomes given the test item being evaluated
    :param pos_act_item:        a dictionary mapping each PoS tag to the sum of the activation values of all the
                                outcomes tagged with the PoS tag across the most active outcomes given the test item
                                being evaluated
    :param freq_baseline:       a dictionary mapping strings (PoS tags) to counts (their frequency of occurrence among
                                the k top active outcomes at baseline, i.e. given all cues)
    :param act_baseline:        a dictionary mapping strings (PoS tags) to activations, obtained by summing the
                                activation  value at baseline for all words tagged with a same PoS tag.
    :param method:              a string indicating the way in which the function looks at top active outcomes; two
                                options are available:
                                - 'freq' makes the function compute the distribution of PoS tags over the k top active
                                    nodes (see the explanation of the parameter k) and rank PoS tags according to their
                                    frequency among the top active cues
                                - 'sum' makes the function compute the sum of activation from all outcomes belonging to
                                    a given PoS tag within the k top active outcomes given the input cues, and rank PoS
                                    tags according to their total activation among the top active cues
    :param evaluation:          a string indicating how to compare baseline activations to item-triggered ones; two
                                options are available:
                                - 'count', simply tag the test item with the PoS tag that either was more frequent or
                                    had highest summed activation within the top active outcomes; frequency or
                                    activation are returned and can be correlated to reaction times
                                - 'distr', compare the frequency counts or summed activations generated by a specific
                                    test item to the frequency counts or summed activations at baseline and tag the test
                                    item with the PoS tag receiving highest support by the change in the distribution of
                                    frequencies or summed activations (a statistic is returned, Chi-squared for
                                    frequency distributions and t-test for summed activations, whose value can be
                                    correlated to reaction times)
    :param stats:               if True, makes the function assign a PoS tag to a test item based on the result of a
                                statistical test (Chi-squared for frequencies, t-test for activations): with the
                                Chi-squared, the PoS tag is chosen whose Pearson standardised residual is highest for
                                the item-triggered frequency distribution; with the t-test, the PoS tag is chosen that..
                                if False, the PoS tag with the highest positive difference between item-triggered and
                                baseline frequency/activation is chosen
                                CAVEAT: this parameter only makes sense if the 'distr' option is chosen for the
                                            'evaluation'parameter
    :return pos:                the PoS tag selected as the best candidate given the activation triggered by the
                                test item
    :return value:              the value used to decide (according to the specifications chosen for the parameters
                                'method', 'evaluation', and 'stats'
    """

    if evaluation == 'distr':
        if method == 'freq':
            if stats:
                # convert dictionaries to numpy array, with item frequencies in the first row and baseline
                # frequencies in the second; then perform a chi-squared test to see if the two frequency
                # distributions are independent, get the table with expected frequencies under the null hypothesis
                # of independence and use them to compute Pearson standardised residuals. Take the highest value
                # from the first row (indicating a higher frequency than expected for the item-triggered frequency
                # distribution) and choose the corresponding PoS tag
                observed_freq, col_ids = dict2numpy(pos_freq_item, freq_baseline)
                chi2_freq, p_freq, dof_freq, expected_freq = chi2_contingency(observed_freq)
                res = std_res(observed_freq, expected_freq)
                pos = col_ids[np.argmax(res[0])]
                value = np.max(res[0])
                return pos, value
            else:
                # find the PoS with the largest positive difference between item measures and baseline and store
                # the difference (frequency gain in one case, activation gain in the other); look for the largest
                # positive difference in the frequency table, and use the activation differences to resolve ties
                diff_freq = differences(pos_freq_item, freq_baseline)
                diff_act = differences(pos_act_item, act_baseline)
                pos, value = get_top_pos_from_dict(diff_freq, diff_act)
                return pos, value
        else:
            diff_freq = differences(pos_freq_item, freq_baseline)
            diff_act = differences(pos_act_item, act_baseline)
            pos, value = get_top_pos_from_dict(diff_act, diff_freq)
            return pos, value
    else:
        # find the PoS with highest frequency/summed activation in the item activation vector, and store the
        # frequency/activation
        if method == 'freq':
            pos, value = get_top_pos_from_dict(pos_freq_item, pos_act_item)
            return pos, value
        else:
            pos, value = get_top_pos_from_dict(pos_act_item, pos_freq_item)
            return pos, value
